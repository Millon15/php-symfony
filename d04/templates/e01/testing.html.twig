
    <p>Symfony2 works with PHPUnit 3.5.11 or later, though version 3.6.4 is needed to test the Symfony
        core code itself.</p>

{% verbatim %}<pre><code># specify the configuration directory on the command line
    $ phpunit -c app/
</code></pre>{% endverbatim %}

    <h3>Unit tests</h3>

    <p>Writing Symfony2 unit tests is no different than writing standard PHPUnit unit tests. Suppose, for
        example, that you have an incredibly simple class called Calculator in the Utility/ directory of your
        bundle:</p>

{% verbatim %}<pre><code>// src/Acme/DemoBundle/Tests/Utility/CalculatorTest.php
namespace Acme\DemoBundle\Tests\Utility;

use Acme\DemoBundle\Utility\Calculator;

class CalculatorTest extends \PHPUnit_Framework_TestCase
{
    public function testAdd()
    {
        $calc = new Calculator();
        $result = $calc-&gt;add(30, 12);

        // assert that our calculator added the numbers correctly!
        $this-&gt;assertEquals(42, $result);
    }
}
</code></pre>{% endverbatim %}

    <p>By convention, the Tests/ sub-directory should replicate the directory of your bundle. So, if you're
        testing a class in your bundle's Utility/ directory, put the test in the Tests/Utility/ directory.</p>

    <p>Running tests for a given file or directory is also very easy:</p>

{% verbatim %}<pre><code># run all tests in the Utility directory
$ phpunit -c app src/Acme/DemoBundle/Tests/Utility/

# run tests for the Calculator class
$ phpunit -c app src/Acme/DemoBundle/Tests/Utility/CalculatorTest.php

# run all tests for the entire Bundle
$ phpunit -c app src/Acme/DemoBundle/
</code></pre>{% endverbatim %}

    <h3>Functional Tests</h3>

    <p>They are no different from unit tests as far as PHPUnit is concerned, but they have a very specific
        workflow:</p>

    <ul>
        <li>Make a request;</li>
        <li>Test the response;</li>
        <li>Click on a link or submit a form;</li>
        <li>Test the response;</li>
        <li>Rinse and repeat.</li>
    </ul>
    <p>Symfony 2 provides a simple functional test for its DemoController as follows:</p>

{% verbatim %}<pre><code>// src/Acme/DemoBundle/Tests/Controller/DemoControllerTest.php
namespace Acme\DemoBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class DemoControllerTest extends WebTestCase
{
    public function testIndex()
    {
        $client = static::createClient();
        $crawler = $client-&gt;request('GET', '/demo/hello/Fabien');
        $this-&gt;assertGreaterThan(0, $crawler-&gt;filter('html:contains("Hello Fabien")')-&gt;count());
    }
}
</code></pre>{% endverbatim %}


    <div class="row">

        <div class="span6">
    <p>The createClient() method returns a client, which is like a browser that you'll use to crawl your site:</p>

    <p>The request() method returns a Crawler object which can be used to select elements in the Response, click on links, and submit forms.</p>

    <ul>
        <li>
            <p>Click on a link:</p>
{% verbatim %}<pre><code>$link = $crawler-&gt;filter('a:contains("Greet")')-&gt;eq(1)-&gt;link();
$crawler = $client-&gt;click($link);
</code></pre>{% endverbatim %}
        </li>

        </div>

        <div class="span6">
        <li>
            <p>Submit a form:</p>

{% verbatim %}<pre><code>$form = $crawler-&gt;selectButton('submit')-&gt;form();

// set some values
$form['name'] = 'Lucas';
$form['form_name[subject]'] = 'Hey there!';

// submit the form
$crawler = $client-&gt;submit($form);
</code></pre>{% endverbatim %}
        </li>
        <li>

        </div>

    </div>

            <p>Assertions:</p>


    <div class="row">

        <div class="span6">
            <p><strong>Assert that the response matches a given CSS selector.</strong></p>

{% verbatim %}<pre><code> $this-&gt;assertGreaterThan(0, $crawler-&gt;filter('h1')-&gt;count());
</code></pre>{% endverbatim %}

            <p><strong>Check content text</strong></p>

{% verbatim %}<pre><code> $this-&gt;assertRegExp('/Hello Fabien/', $client-&gt;getResponse()-&gt;getContent());
</code></pre>{% endverbatim %}

            <p><strong>Assert that there is more than one h2 tag with the class "subtitle"</strong></p>

{% verbatim %}<pre><code> $this-&gt;assertGreaterThan(0, $crawler-&gt;filter('h2.subtitle')-&gt;count());
</code></pre>{% endverbatim %}

            <p><strong>Assert that there are exactly 4 h2 tags on the page</strong></p>

{% verbatim %}<pre><code> $this-&gt;assertCount(4, $crawler-&gt;filter('h2'));
</code></pre>{% endverbatim %}

            <p><strong>Assert that the "Content-Type" header is "application/json</strong></p>

{% verbatim %}<pre><code> $this-&gt;assertTrue($client-&gt;getResponse()-&gt;headers-&gt;contains('Content-Type','application/json'));
</code></pre>{% endverbatim %}

            <p><strong>Assert that the response content matches a regexp</strong></p>

{% verbatim %}<pre><code>$this-&gt;assertRegExp('/foo/', $client-&gt;getResponse()-&gt;getContent());
</code></pre>{% endverbatim %}

            <p><strong>Assert that the response status code is 2xx</strong></p>

{% verbatim %}<pre><code>$this-&gt;assertTrue($client-&gt;getResponse()-&gt;isSuccessful());
</code></pre>{% endverbatim %}

            <p><strong>Assert that the response status code is 404</strong></p>

{% verbatim %}<pre><code>$this-&gt;assertTrue($client-&gt;getResponse()-&gt;isNotFound());
</code></pre>{% endverbatim %}

            <p><strong>Assert a specific 200 status code</strong></p>

{% verbatim %}<pre><code>$this-&gt;assertEquals(200, $client-&gt;getResponse()-&gt;getStatusCode());
</code></pre>{% endverbatim %}

            <p><strong>Assert that the response is a redirect to /demo/contact</strong></p>

{% verbatim %}<pre><code>$this-&gt;assertTrue($client-&gt;getResponse()-&gt;isRedirect('/demo/contact'));
</code></pre>{% endverbatim %}

            <p><strong>or simply check that the response is a redirect to any URL</strong></p>

{% verbatim %}<pre><code>$this-&gt;assertTrue($client-&gt;getResponse()-&gt;isRedirect());
</code></pre>{% endverbatim %}

            <p><strong>Directly submit a form (but using the Crawler is easier!)</strong></p>

{% verbatim %}<pre><code>$client-&gt;request('POST', '/submit', array('name' =&gt; 'Fabien'));
</code></pre>{% endverbatim %}
        </div>

        <div class="span6">


            <p><strong>Form submission with a file upload</strong></p>

{% verbatim %}<pre><code>use Symfony\Component\HttpFoundation\File\UploadedFile;

    $photo = new UploadedFile(
    '/path/to/photo.jpg',
    'photo.jpg',
    'image/jpeg',
    123
    );
    // or
    $photo = array(
    'tmp_name' =&gt; '/path/to/photo.jpg',
    'name' =&gt; 'photo.jpg',
    'type' =&gt; 'image/jpeg',
    'size' =&gt; 123,
    'error' =&gt; UPLOAD_ERR_OK
    );
    $client-&gt;request(
    'POST',
    '/submit',
    array('name' =&gt; 'Fabien'),
    array('photo' =&gt; $photo)
    );
</code></pre>{% endverbatim %}

            <p><strong>Perform a DELETE requests, and pass HTTP headers</strong></p>

{% verbatim %}<pre><code>$client-&gt;request(
    'DELETE',
    '/post/12',
    array(),
    array(),
    array('PHP_AUTH_USER' =&gt; 'username', 'PHP_AUTH_PW' =&gt; 'pa$$word')
    );
</code></pre>{% endverbatim %}

            <p><strong>browsing</strong></p>

{% verbatim %}<pre><code>$client-&gt;back();
$client-&gt;forward();
$client-&gt;reload();
</code></pre>{% endverbatim %}

            <p><strong>Clears all cookies and the history</strong></p>

{% verbatim %}<pre><code>$client-&gt;restart();
</code></pre>{% endverbatim %}

            <p><strong>redirecting</strong></p>

{% verbatim %}<pre><code>$crawler = $client-&gt;followRedirect();
$client-&gt;followRedirects();
</code></pre>{% endverbatim %}
        </li>
        </div>

    </div>

    </ul>


    <h3>The Request() method:</h3>

    <div class="row">

        <div class="span6">

{% verbatim %}<pre><code>request(
    $method,
    $uri,
    array $parameters = array(),
    array $files = array(),
    array $server = array(),
    $content = null,
    $changeHistory = true
)
</code></pre>{% endverbatim %}
    <p>The server array is the raw values that you'd expect to normally find in the PHP $_SERVER4
        superglobal. For example, to set the Content-Type and Referer HTTP headers, you'd pass the
        following:</p>
        </div>

        <div class="span6">


{% verbatim %}<pre><code>$client-&gt;request(
    'GET',
    '/demo/hello/Fabien',
    array(),
    array(),
    array(
        'CONTENT_TYPE' =&gt; 'application/json',
        'HTTP_REFERER' =&gt; '/foo/bar',
        )
    );
</code></pre>{% endverbatim %}
        </div>

    </div>


    <h3>Accessing Internal Objects</h3>

    <p>If you use the client to test your application, you might want to access the client's internal objects:</p>

{% verbatim %}<pre><code>$history = $client-&gt;getHistory();
$cookieJar = $client-&gt;getCookieJar();
</code></pre>{% endverbatim %}

    <p>You can also get the objects related to the latest request:</p>

{% verbatim %}<pre><code>$request = $client-&gt;getRequest();
$response = $client-&gt;getResponse();
$crawler = $client-&gt;getCrawler();
</code></pre>{% endverbatim %}

    <p>If your requests are not insulated, you can also access the Container and the Kernel:</p>

{% verbatim %}<pre><code>$container = $client-&gt;getContainer();
$kernel = $client-&gt;getKernel();
$profile = $client-&gt;getProfile();
</code></pre>{% endverbatim %}

    <h3>The Crawler</h3>

    <div class="row">

        <div class="span6">
    <p>A Crawler instance is returned each time you make a request with the Client. It allows you to traverse
        HTML documents, select nodes, find links and forms.</p>

    <p>Like jQuery, the Crawler has methods to traverse the DOM of an HTML/XML document.</p>

{% verbatim %}<pre><code>$newCrawler = $crawler-&gt;filter('input[type=submit]')
    -&gt;last()
    -&gt;parents()
    -&gt;first();
</code></pre>{% endverbatim %}

    <p>Many other methods are also available:</p>

    <ul>
        <li>filter('h1.title') Nodes that match the CSS selector</li>
        <li>filterXpath('h1') Nodes that match the XPath expression</li>
        <li>eq(1) Node for the specified index</li>
        <li>first() First node</li>
        <li>last() Last node</li>
        <li>siblings() Siblings</li>
        <li>nextAll() All following siblings</li>
        <li>previousAll() All preceding siblings</li>
        <li>parents() Returns the parent nodes</li>
        <li>children() Returns children nodes</li>
        <li>reduce($lambda) Nodes for which the callable does not return false</li>
    </ul>

        </div>

        <div class="span6">
    <h4>Extracting information</h4>

    {% verbatim %}
<pre><code>// Returns the attribute value for the first node
$crawler-&gt;attr('class');

// Returns the node value for the first node
$crawler-&gt;text();

// Extracts an array of attributes for all nodes (_text returns the node value)
// returns an array for each element in crawler, each with the value and href
$info = $crawler-&gt;extract(array('_text', 'href'));

// Executes a lambda for each node and return an array of results
$data = $crawler-&gt;each(function ($node, $i)
{
    return $node-&gt;attr('href');
});

//Selecting links
$crawler-&gt;selectLink('Click here');
$link = $crawler-&gt;selectLink('Click here')-&gt;link();
$client-&gt;click($link);
</code></pre>{% endverbatim %}

        </div>

    </div>



    <div class="row">

        <div class="span6">
    <h3>Forms</h3>
{% verbatim %}<pre><code>// Selecting buttons.
$buttonCrawlerNode = $crawler-&gt;selectButton('submit');

// You can override values by:

$form = $buttonCrawlerNode-&gt;form(array(
    'name' =&gt; 'Fabien',
    'my_form[subject]' =&gt; 'Symfony rocks!',
));

//Simulate methods
$form = $buttonCrawlerNode-&gt;form(array(), 'DELETE');

//Submit form.
$client-&gt;submit($form);

//Submit with arguments.
$client-&gt;submit($form, array(
    'name' =&gt; 'Fabien',
    'my_form[subject]' =&gt; 'Symfony rocks!',
));

// Using arrays.
$form['name'] = 'Fabien';
$form['my_form[subject]'] = 'Symfony rocks!';

// Select an option or a radio
$form['country']-&gt;select('France');

// Tick a checkbox
$form['like_symfony']-&gt;tick();

// Upload a file
$form['photo']-&gt;upload('/path/to/lucas.jpg');
</code></pre>{% endverbatim %}

        </div>

        <div class="span6">

    <h3>Test environment configuration</h3>

    <p>The swiftmailer is configured to not actually deliver emails in the test
        environment. You can see this under the swiftmailer configuration option:</p>

    {% verbatim %}
<pre><code># app/config/config_test.yml
swiftmailer:
    disable_delivery: true
</code></pre>{% endverbatim %}

    <p>You can also use a different environment entirely, or override the default debug mode (true) by passing
        each as options to the createClient() method:</p>

    <p><strong>custom environment</strong></p>

{% verbatim %}<pre><code>$client = static::createClient(array(
    'environment' =&gt; 'my_test_env',
    'debug' =&gt; false,
    ));
</code></pre>{% endverbatim %}

    <p><strong>custom user agent</strong></p>

{% verbatim %}<pre><code>$client = static::createClient(array(), array(
    'HTTP_HOST' =&gt; 'en.example.com',
    'HTTP_USER_AGENT' =&gt; 'MySuperBrowser/1.0',
));
</code></pre>{% endverbatim %}

    <p><strong>override HTTP headers</strong></p>

{% verbatim %}<pre><code>$client-&gt;request('GET', '/', array(), array(), array(
    'HTTP_HOST' =&gt; 'en.example.com',
    'HTTP_USER_AGENT' =&gt; 'MySuperBrowser/1.0',
));
</code></pre>{% endverbatim %}


        </div>

    </div>

